name: Docker Test-Publish

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            echo Testing ${GITHUB_REPOSITORY,,}
            DOCKER_BUILDKIT=1 docker build . --file Dockerfile --cache-from ${GITHUB_REPOSITORY,,}:shell-operator --cache-from ${GITHUB_REPOSITORY,,}:libjq --cache-from ${GITHUB_REPOSITORY,,}:latest --build-arg=BUILDKIT_INLINE_CACHE=1
          fi


  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v1

      - name: Build image
        run:  |
          DOCKER_BUILDKIT=1 docker build . --file Dockerfile --tag ${GITHUB_REPOSITORY,,}:libjq --target libjq --cache-from ${GITHUB_REPOSITORY,,}:libjq --build-arg=BUILDKIT_INLINE_CACHE=1
          DOCKER_BUILDKIT=1 docker build . --file Dockerfile --tag ${GITHUB_REPOSITORY,,}:shell-operator --target shell-operator --cache-from ${GITHUB_REPOSITORY,,}:shell-operator --build-arg=BUILDKIT_INLINE_CACHE=1
          DOCKER_BUILDKIT=1 docker build . --file Dockerfile --tag ${GITHUB_REPOSITORY,,} --cache-from ${GITHUB_REPOSITORY,,}:shell-operator --cache-from ${GITHUB_REPOSITORY,,}:libjq --cache-from ${GITHUB_REPOSITORY,,}:latest --build-arg=BUILDKIT_INLINE_CACHE=1

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=${GITHUB_REPOSITORY,,}
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag ${GITHUB_REPOSITORY,,} $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          docker push ${GITHUB_REPOSITORY,,}:libjq
          docker push ${GITHUB_REPOSITORY,,}:shell-operator